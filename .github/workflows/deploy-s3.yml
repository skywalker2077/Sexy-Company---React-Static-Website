name: Deploy to AWS S3

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  deploy:
    name: Build and Deploy to S3
    runs-on: ubuntu-latest
    
    # Ambiente de deploy (requer configuração de environments no GitHub)
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.DEPLOYMENT_URL }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        echo "Installing dependencies for production build..."
        npm ci --production=false
        
    - name: 🏗️ Build React application
      run: |
        echo "Building React application for production..."
        npm run build
        
    - name: 📊 Build summary
      run: |
        echo "🎉 Build completed successfully!"
        echo "Build artifacts:"
        ls -la build/
        
        echo "📏 Build size analysis:"
        du -sh build/*
        
        echo "🔍 Critical files check:"
        test -f build/index.html && echo "✅ index.html exists"
        test -d build/static && echo "✅ static directory exists"
        
        # Contar arquivos JS e CSS
        JS_FILES=$(find build/static -name "*.js" | wc -l)
        CSS_FILES=$(find build/static -name "*.css" | wc -l)
        echo "📄 Generated $JS_FILES JS files and $CSS_FILES CSS files"
        
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🚀 Deploy to S3
      run: |
        # Deploy para o bucket específico: sexy-company
        BUCKET_NAME="sexy-company"
        CLOUDFRONT_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
        
        echo "🪣 Deploying to S3 bucket: $BUCKET_NAME"
        
        # Comando principal de sync conforme solicitado
        aws s3 sync build/ s3://$BUCKET_NAME --delete
        
        echo "✅ Files uploaded to S3 successfully using: aws s3 sync build/ s3://$BUCKET_NAME --delete"
        
        # Configurar permissões públicas para os arquivos (se necessário)
        echo "🔧 Setting public read permissions..."
        aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::sexy-company/*"
            }
          ]
        }' || echo "⚠️ Bucket policy may already be set or permissions insufficient"
        
        echo "✅ Deploy to S3 completed successfully"
        
        # Invalidar CloudFront cache se configurado
        if [ ! -z "$CLOUDFRONT_ID" ]; then
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*"
          echo "✅ CloudFront cache invalidated"
        fi
        
        echo "🎉 Deployment completed successfully!"
        
    - name: 🔗 Deployment URL
      run: |
        BUCKET_NAME="sexy-company"
        CLOUDFRONT_URL="${{ vars.CLOUDFRONT_URL }}"
        
        if [ ! -z "$CLOUDFRONT_URL" ]; then
          echo "🌐 Site available at: https://$CLOUDFRONT_URL"
        else
          echo "🌐 Site available at: http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          echo "🌐 Alternative URL: https://$BUCKET_NAME.s3.amazonaws.com/index.html"
        fi

  # Job de verificação pós-deploy
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: 🔍 Health check
      run: |
        SITE_URL="${{ vars.DEPLOYMENT_URL }}"
        
        if [ ! -z "$SITE_URL" ]; then
          echo "🏥 Performing health check on: $SITE_URL"
          
          # Verificar se o site está acessível
          if curl -f -s -o /dev/null "$SITE_URL"; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site health check failed"
            exit 1
          fi
          
          # Verificar se o título da página está correto
          if curl -s "$SITE_URL" | grep -q "Sexy Company"; then
            echo "✅ Page title verification passed"
          else
            echo "⚠️ Page title verification failed"
          fi
        else
          echo "ℹ️ No deployment URL configured for verification"
        fi