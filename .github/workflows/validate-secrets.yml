name: Validate GitHub Secrets

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of validation to run'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - full

jobs:
  validate-secrets:
    name: Validate AWS Secrets Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check if secrets are configured
      run: |
        echo "🔍 Validating GitHub Secrets configuration..."
        echo ""
        
        # Check AWS_ACCESS_KEY_ID
        if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "✅ AWS_ACCESS_KEY_ID: Configured (${#{{ secrets.AWS_ACCESS_KEY_ID }}} characters)"
          ACCESS_KEY_FIRST_CHARS=$(echo "${{ secrets.AWS_ACCESS_KEY_ID }}" | cut -c1-4)
          echo "   Starts with: ${ACCESS_KEY_FIRST_CHARS}..."
        else
          echo "❌ AWS_ACCESS_KEY_ID: NOT CONFIGURED"
          EXIT_CODE=1
        fi
        
        # Check AWS_SECRET_ACCESS_KEY  
        if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "✅ AWS_SECRET_ACCESS_KEY: Configured (${#{{ secrets.AWS_SECRET_ACCESS_KEY }}} characters)"
        else
          echo "❌ AWS_SECRET_ACCESS_KEY: NOT CONFIGURED"
          EXIT_CODE=1
        fi
        
        # Check S3_BUCKET_NAME
        if [ -n "${{ secrets.S3_BUCKET_NAME }}" ]; then
          echo "✅ S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}"
        else
          echo "ℹ️ S3_BUCKET_NAME: Not configured (using hardcoded 'sexy-company')"
        fi
        
        # Check CLOUDFRONT_DISTRIBUTION_ID
        if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          echo "✅ CLOUDFRONT_DISTRIBUTION_ID: Configured"
        else
          echo "ℹ️ CLOUDFRONT_DISTRIBUTION_ID: Not configured (CloudFront skip)"
        fi
        
        echo ""
        if [ ${EXIT_CODE:-0} -eq 1 ]; then
          echo "❌ VALIDATION FAILED: Missing required secrets"
          exit 1
        else
          echo "✅ VALIDATION PASSED: All required secrets configured"
        fi
        
    - name: 🔧 Test AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🔧 Testing AWS credentials..."
        
        # Test AWS CLI access
        if aws sts get-caller-identity; then
          echo "✅ AWS credentials are valid"
          
          # Get account info
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          USER_ARN=$(aws sts get-caller-identity --query Arn --output text)
          
          echo "📋 AWS Account Info:"
          echo "   Account ID: $ACCOUNT_ID"
          echo "   User/Role: $USER_ARN"
          
        else
          echo "❌ AWS credentials test FAILED"
          exit 1
        fi
        
    - name: 🪣 Test S3 bucket access
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🪣 Testing S3 bucket access..."
        BUCKET_NAME="sexy-company"
        
        # Check if bucket exists
        if aws s3 ls s3://$BUCKET_NAME/ >/dev/null 2>&1; then
          echo "✅ Bucket '$BUCKET_NAME' exists and is accessible"
          
          # List bucket contents
          echo "📄 Bucket contents:"
          aws s3 ls s3://$BUCKET_NAME/ || echo "   (empty)"
          
          # Test permissions
          echo "🔧 Testing write permissions..."
          echo "test-$(date +%s)" > test-file.txt
          
          if aws s3 cp test-file.txt s3://$BUCKET_NAME/test-file.txt; then
            echo "✅ Write permission: OK"
            
            # Clean up test file
            aws s3 rm s3://$BUCKET_NAME/test-file.txt
            echo "🧹 Test file cleaned up"
            
          else
            echo "❌ Write permission: FAILED"
            exit 1
          fi
          
        else
          echo "❌ Bucket '$BUCKET_NAME' not accessible or doesn't exist"
          echo "🔧 Attempting to create bucket..."
          
          if aws s3 mb s3://$BUCKET_NAME --region us-east-1; then
            echo "✅ Bucket created successfully"
          else
            echo "❌ Failed to create bucket"
            exit 1
          fi
        fi
        
    - name: 🌐 Test website configuration
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🌐 Testing S3 website configuration..."
        BUCKET_NAME="sexy-company"
        
        # Configure website hosting
        aws s3 website s3://$BUCKET_NAME \
          --index-document index.html \
          --error-document index.html
          
        echo "✅ Website hosting configured"
        
        # Test website endpoint
        WEBSITE_URL="http://$BUCKET_NAME.s3-website-us-east-1.amazonaws.com"
        echo "🔗 Website URL: $WEBSITE_URL"
        
        # Create a simple test page
        cat > test-index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>Sexy Company - Test</title>
        </head>
        <body>
            <h1>🧪 Test Page</h1>
            <p>Sexy Company website test - $(date)</p>
            <p>✅ AWS S3 deployment working!</p>
        </body>
        </html>
        EOF
        
        # Upload test page
        aws s3 cp test-index.html s3://$BUCKET_NAME/test.html \
          --content-type "text/html"
          
        echo "✅ Test page uploaded"
        
    - name: 🔒 Test bucket policy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🔒 Testing bucket policy configuration..."
        BUCKET_NAME="sexy-company"
        
        # Create bucket policy
        cat > bucket-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
            }
          ]
        }
        EOF
        
        # Apply bucket policy
        if aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json; then
          echo "✅ Bucket policy applied successfully"
        else
          echo "⚠️ Failed to apply bucket policy (might need to disable public access blocks)"
        fi
        
        # Remove public access blocks
        echo "🔓 Removing public access blocks..."
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration \
          BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false \
          || echo "⚠️ Could not modify public access blocks"
        
    - name: 📊 Validation Summary
      run: |
        echo "📊 GitHub Secrets Validation Summary"
        echo "=================================="
        echo "✅ AWS_ACCESS_KEY_ID: Configured and valid"
        echo "✅ AWS_SECRET_ACCESS_KEY: Configured and valid"
        echo "✅ S3 Bucket Access: Working"
        echo "✅ S3 Website Hosting: Configured"
        echo "✅ Bucket Policy: Applied"
        echo ""
        echo "🎉 All validations passed!"
        echo ""
        echo "🔗 Your website will be available at:"
        echo "   http://sexy-company.s3-website-us-east-1.amazonaws.com"
        echo ""
        echo "🚀 Ready for automatic deployment!"
        
  test-deploy:
    name: Test Deployment Process
    runs-on: ubuntu-latest
    needs: validate-secrets
    if: github.event.inputs.test_type == 'full'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build project
      run: npm run build
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: 🧪 Test deployment
      run: |
        echo "🧪 Testing full deployment process..."
        
        # Deploy using the exact command
        aws s3 sync build/ s3://sexy-company --delete
        
        echo "✅ Test deployment completed successfully!"
        echo ""
        echo "🌐 Website deployed to:"
        echo "   http://sexy-company.s3-website-us-east-1.amazonaws.com"