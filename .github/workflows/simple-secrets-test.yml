name: Simple Secrets Test

on:
  workflow_dispatch:

jobs:
  test-secrets:
    name: Test AWS Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check secrets configuration
      run: |
        echo "🔍 Testing GitHub Secrets..."
        echo ""
        
        # Simple validation without complex bash syntax
        echo "Testing AWS credentials..."
        
    - name: 🔧 Test AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🔧 Testing AWS access..."
        
        # Test if credentials work
        if aws sts get-caller-identity; then
          echo ""
          echo "✅ SUCCESS: AWS credentials are working!"
          echo ""
          
          # Show account info
          echo "📋 AWS Account Information:"
          aws sts get-caller-identity --output table
          echo ""
          
        else
          echo ""
          echo "❌ FAILED: AWS credentials are not working!"
          echo ""
          echo "Please check:"
          echo "1. AWS_ACCESS_KEY_ID is correct"
          echo "2. AWS_SECRET_ACCESS_KEY is correct" 
          echo "3. The IAM user has necessary permissions"
          exit 1
        fi
        
    - name: 🪣 Test S3 bucket access
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🪣 Testing S3 bucket access..."
        BUCKET_NAME="sexy-company"
        
        # Check if bucket exists and is accessible
        if aws s3 ls s3://$BUCKET_NAME/ >/dev/null 2>&1; then
          echo "✅ Bucket '$BUCKET_NAME' is accessible"
          
          # Show bucket contents
          echo ""
          echo "📄 Current bucket contents:"
          aws s3 ls s3://$BUCKET_NAME/ || echo "   (bucket is empty)"
          echo ""
          
        else
          echo "⚠️ Bucket '$BUCKET_NAME' not found or not accessible"
          echo "🔧 Attempting to create bucket..."
          
          if aws s3 mb s3://$BUCKET_NAME --region us-east-1; then
            echo "✅ Bucket created successfully!"
          else
            echo "❌ Failed to create bucket. It might already exist in another account."
            echo "Please check bucket name availability."
          fi
        fi
        
        # Test write permissions
        echo "🔧 Testing write permissions..."
        echo "test-file-$(date +%s)" > test-file.txt
        
        if aws s3 cp test-file.txt s3://$BUCKET_NAME/test-file.txt; then
          echo "✅ Write permission: OK"
          
          # Clean up
          aws s3 rm s3://$BUCKET_NAME/test-file.txt
          echo "🧹 Test file cleaned up"
          
        else
          echo "❌ Write permission: FAILED"
          echo "Please check IAM permissions for S3 operations"
          exit 1
        fi
        
    - name: 🌐 Configure S3 website hosting
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        echo "🌐 Configuring S3 website hosting..."
        BUCKET_NAME="sexy-company"
        
        # Configure website hosting
        if aws s3 website s3://$BUCKET_NAME \
          --index-document index.html \
          --error-document index.html; then
          echo "✅ Website hosting configured"
        else
          echo "⚠️ Failed to configure website hosting"
        fi
        
        # Set bucket policy for public access
        echo "🔒 Setting bucket policy for public access..."
        
        cat > bucket-policy.json << 'EOF'
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::sexy-company/*"
            }
          ]
        }
        EOF
        
        # Remove public access blocks first
        echo "🔓 Removing public access blocks..."
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration \
          BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false \
          || echo "⚠️ Could not modify public access blocks"
        
        # Apply bucket policy
        if aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket-policy.json; then
          echo "✅ Bucket policy applied successfully"
        else
          echo "⚠️ Failed to apply bucket policy"
        fi
        
    - name: 🎉 Test Summary
      run: |
        echo ""
        echo "🎉 GitHub Secrets Validation Complete!"
        echo "====================================="
        echo ""
        echo "✅ AWS credentials: Working"
        echo "✅ S3 bucket access: OK"
        echo "✅ S3 write permissions: OK"
        echo "✅ Website hosting: Configured"
        echo "✅ Public access: Configured"
        echo ""
        echo "🌐 Your website will be available at:"
        echo "   http://sexy-company.s3-website-us-east-1.amazonaws.com"
        echo ""
        echo "🚀 Ready for automatic deployment!"
        echo ""
        echo "Next step: Push code to main branch to trigger deployment"